!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
M._check_buf_modifired	lua/notesclient_prod/userfunc.lua	/^function M._check_buf_modifired(buf)$/;"	f
M._parse_entity_line	lua/notesclient_prod/userfunc.lua	/^function M._parse_entity_line(line)$/;"	f
M._show_item	lua/notesclient_prod/userfunc.lua	/^function M._show_item(item_id, buf_name, fetch_func)$/;"	f
M.create_buffer	lua/notesclient_prod/display.lua	/^function M.create_buffer(name)$/;"	f
M.find_buf_by_name	lua/notesclient_prod/display.lua	/^function M.find_buf_by_name(name)$/;"	f
M.init_buf_by_name	lua/notesclient_prod/display.lua	/^function M.init_buf_by_name(file_name)$/;"	f
M.list_notes	lua/notesclient_prod/userfunc.lua	/^function M.list_notes()$/;"	f
M.list_todos	lua/notesclient_prod/userfunc.lua	/^function M.list_todos()$/;"	f
M.login	lua/notesclient_prod/userfunc.lua	/^function M.login()$/;"	f
M.new_note	lua/notesclient_prod/userfunc.lua	/^function M.new_note()$/;"	f
M.new_todo	lua/notesclient_prod/userfunc.lua	/^function M.new_todo()$/;"	f
M.open_under_cursor	lua/notesclient_prod/userfunc.lua	/^function M.open_under_cursor()$/;"	f
M.parse_lines	lua/notesclient_prod/display.lua	/^function M.parse_lines(input)$/;"	f
M.save_text_entity	lua/notesclient_prod/userfunc.lua	/^function M.save_text_entity(event_data)$/;"	f
M.search_notes	lua/notesclient_prod/userfunc.lua	/^function M.search_notes(cmd_params)$/;"	f
M.search_todos	lua/notesclient_prod/userfunc.lua	/^function M.search_todos(cmd_params)$/;"	f
M.show_in_new_buf	lua/notesclient_prod/display.lua	/^function M.show_in_new_buf(input, options)$/;"	f
M.show_note	lua/notesclient_prod/userfunc.lua	/^function M.show_note(opts)$/;"	f
M.show_today	lua/notesclient_prod/userfunc.lua	/^function M.show_today(opts)$/;"	f
M.show_today_by_date	lua/notesclient_prod/userfunc.lua	/^function M.show_today_by_date(cmd_params)$/;"	f
M.show_todo	lua/notesclient_prod/userfunc.lua	/^function M.show_todo(opts)$/;"	f
M.split	lua/notesclient_prod/utils.lua	/^function M.split(input)$/;"	f
M.unfold_entity	lua/notesclient_prod/userfunc.lua	/^function M.unfold_entity()$/;"	f
M.with_modifiable	lua/notesclient_prod/utils.lua	/^function M.with_modifiable(bufnr, change_buf)$/;"	f
['<S-Tab>'] 	init.lua	/^    ['<S-Tab>'] = cmp.mapping(function(fallback)$/;"	f
['<Tab>'] 	init.lua	/^    ['<Tab>'] = cmp.mapping(function(fallback)$/;"	f
['[M'] 	init.lua	/^        ['[M'] = '@function.outer',$/;"	f
['[m'] 	init.lua	/^        ['[m'] = '@function.outer',$/;"	f
[']M'] 	init.lua	/^        [']M'] = '@function.outer',$/;"	f
[']m'] 	init.lua	/^        [']m'] = '@function.outer',$/;"	f
['af'] 	init.lua	/^        ['af'] = '@function.outer',$/;"	f
['if'] 	init.lua	/^        ['if'] = '@function.inner',$/;"	f
['note'] 	lua/notesclient_prod/userfunc.lua	/^        ['note'] = function () M.show_note({args = entity_id}) end,$/;"	f
['today'] 	lua/notesclient_prod/userfunc.lua	/^        ['today'] = function () M.show_today({args = entity_id}) end,$/;"	f
['todo'] 	lua/notesclient_prod/userfunc.lua	/^        ['todo'] = function () M.show_todo({args = entity_id}) end,$/;"	f
_get_result_by_url	lua/notesclient_prod/api.lua	/^function _get_result_by_url(url, params)$/;"	f
_show_fetched	lua/notesclient_prod/userfunc.lua	/^local function _show_fetched(fetched, error_msg)$/;"	f
api.get_note	lua/notesclient_prod/api.lua	/^function api.get_note(note_id)$/;"	f
api.get_notes	lua/notesclient_prod/api.lua	/^function api.get_notes(params)$/;"	f
api.get_text_by_line	lua/notesclient_prod/api.lua	/^function api.get_text_by_line(item_line)$/;"	f
api.get_today	lua/notesclient_prod/api.lua	/^function api.get_today(today_id)$/;"	f
api.get_today_by_date	lua/notesclient_prod/api.lua	/^function api.get_today_by_date(date)$/;"	f
api.get_todo	lua/notesclient_prod/api.lua	/^function api.get_todo(todo_id)$/;"	f
api.get_todos	lua/notesclient_prod/api.lua	/^function api.get_todos(params)$/;"	f
api.login	lua/notesclient_prod/api.lua	/^function api.login(login, password)$/;"	f
api.save_text_entity	lua/notesclient_prod/api.lua	/^function api.save_text_entity(text)$/;"	f
b:	syntax/notetake.vim	/^    let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:current_syntax	syntax/notetake.vim	/^let b:current_syntax = "markdown"$/;"	v
callback 	init.lua	/^  callback = function()$/;"	f
escape_str	lua/notesclient_prod/json.lua	/^local function escape_str(s)$/;"	f
expand 	init.lua	/^    expand = function(args)$/;"	f
fetch_json_data	lua/notesclient_prod/api.lua	/^local function fetch_json_data(url, method, params)$/;"	f
g:markdown_fenced_languages	syntax/notetake.vim	/^  let g:markdown_fenced_languages = []$/;"	v
g:markdown_minlines	syntax/notetake.vim	/^  let g:markdown_minlines = 50$/;"	v
get_option	lua/notesclient_prod/display.lua	/^local function get_option(options, key, default)$/;"	f
if vim.api.nvim_call_function('has', {'nvim-0.5'}) ~	plugin/packer_compiled.lua	/^if vim.api.nvim_call_function('has', {'nvim-0.5'}) ~= 1 then$/;"	f
json.parse	lua/notesclient_prod/json.lua	/^function json.parse(str, pos, end_delim)$/;"	f
json.stringify	lua/notesclient_prod/json.lua	/^function json.stringify(obj, as_key)$/;"	f
kind_of	lua/notesclient_prod/json.lua	/^local function kind_of(obj)$/;"	f
local nmap 	init.lua	/^  local nmap = function(keys, func, desc)$/;"	f
local no_errors, error_msg 	plugin/packer_compiled.lua	/^local no_errors, error_msg = pcall(function()$/;"	f
local on_attach 	init.lua	/^local on_attach = function(_, bufnr)$/;"	f
main_syntax	syntax/notetake.vim	/^  let main_syntax = 'markdown'$/;"	v
make_json_request	lua/notesclient_prod/api.lua	/^local function make_json_request(url, method, params)$/;"	f
message	lua/notesclient_prod/userfunc.lua	/^local function message(mess)$/;"	f
parse_num_val	lua/notesclient_prod/json.lua	/^local function parse_num_val(str, pos)$/;"	f
parse_str_val	lua/notesclient_prod/json.lua	/^local function parse_str_val(str, pos, val)$/;"	f
read_from_session_file	lua/notesclient_prod/api.lua	/^local function read_from_session_file()$/;"	f
run 	lua/pluginstall.lua	/^    run = function()$/;"	f
s:concealends	syntax/notetake.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	syntax/notetake.vim	/^let s:concealends = ''$/;"	v
s:done_include	syntax/notetake.vim	/^  let s:done_include[matchstr(s:type,'[^.]*')] = 1$/;"	v
s:done_include	syntax/notetake.vim	/^let s:done_include = {}$/;"	v
s:foldmethod	syntax/notetake.vim	/^  let s:foldmethod = &l:foldmethod$/;"	v
s:foldtext	syntax/notetake.vim	/^  let s:foldtext = &l:foldtext$/;"	v
s:iskeyword	syntax/notetake.vim	/^let s:iskeyword = &l:iskeyword$/;"	v
save_profiles	plugin/packer_compiled.lua	/^local function save_profiles(threshold)$/;"	f
skip_delim	lua/notesclient_prod/json.lua	/^local function skip_delim(str, pos, delim, err_if_missing)$/;"	f
time 	plugin/packer_compiled.lua	/^  time = function(chunk, start) end$/;"	f
time 	plugin/packer_compiled.lua	/^  time = function(chunk, start)$/;"	f
try_loadstring	plugin/packer_compiled.lua	/^local function try_loadstring(s, component, name)$/;"	f
write_to_session_file	lua/notesclient_prod/api.lua	/^local function write_to_session_file(cookie_session)$/;"	f
